/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10.1/userguide/building_java_projects.html in the Gradle documentation.
 *
 * (#)build.gradle  0.1.0   09/23/2024
 *
 * @version  0.1.0
 * @since    0.1.0
 *
 * MIT License
 *
 * Copyright (c) 2024 Jonathan M. Parker
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * The following system property must be set in HOME/.gradle/gradle.properties:
 *   systemProp.macosArchitecture=intel -or-
 *   systemProp.macosArchitecture=silicon
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.

    id 'java-library'
    id 'maven-publish'
}

apply plugin : 'java-library'

ext {
    macosArchitecture = System.getProperty('macosArchitecture')
    artifactName = 'testing-utilities'
}

println "The macOS architecture is ${macosArchitecture}"

repositories {
    mavenLocal()
    mavenCentral()  // url = uri('https://repo.maven.apache.org/maven2/')

    maven {
        url = uri('http://maven.repository.redhat.com/techpreview/all')

        allowInsecureProtocol = true
    }

    maven {
        url = uri('http://localhost:8081/nexus/content/repositories/releases')

        allowInsecureProtocol = true
    }
}

dependencies {
    testImplementation libs.junit
}

group = 'net.jmp.util.testing.testutil'
version = '0.1.0'
description = 'Testing-Utilities'

println "The groupId is ${project.group}"
println "The artifactId is ${artifactName}"
println "The version is ${project.version}"

java.sourceCompatibility = JavaVersion.VERSION_23

java {
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(23)
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version

            from components.java
        }
    }
}

test {
    testLogging.showStandardStreams = true
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release.set(23)
}

tasks.withType(Javadoc).configureEach {
    CoreJavadocOptions cjo = options as CoreJavadocOptions
    StandardJavadocDocletOptions sjdo = options as StandardJavadocDocletOptions

    cjo.encoding("UTF-8")
    cjo.addStringOption("source", "23")
    cjo.memberLevel = JavadocMemberLevel.PRIVATE

    sjdo.version(true)
}
